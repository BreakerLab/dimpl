From 736a347e152409c58da0f1c87bfde2302788116e Mon Sep 17 00:00:00 2001
From: Ken Brewer <kenneth.brewer@yale.edu>
Date: Sun, 29 Mar 2020 17:30:09 -0400
Subject: [PATCH] Glenn Gaffield modifications

---
 __init__.py      | 13 +++++++------
 axis.py          |  3 ++-
 bedtrack.py      | 55 +++++++++++++++++++++++++++++++++++++++----------------
 genomeview.py    |  3 ++-
 svg.py           |  3 ++-
 5 files changed, 51 insertions(+), 24 deletions(-)

diff --git a/__init__.py b/__init__.py
index 5a29ee8..cbd87f6 100644
--- a/__init__.py
+++ b/__init__.py
@@ -5,14 +5,15 @@ from genomeview.genomesource import *
 
 try:
     from genomeview._quickconsensus import *
-except ImportError:
-    import logging
-    logging.warn("Unable to load cythonized quickconsensus module; "
-                 "drawing reads using quick consensus mode will be "
-                 "substantially slower")
+except (ImportError,ValueError):
+#    import logging
+#    logging.warn("Unable to load cythonized quickconsensus module; "
+#                 "drawing reads using quick consensus mode will be "
+#                 "substantially slower")
     from genomeview.quickconsensus import *
-except:
+except Exception as exception:
     import logging
+    print(exception,"\n", False)
     logging.error("Unable to load cythonized quickconsensus module; "
                   "this is likely because pysam has been updated "
                   "since genomeview was originally install. To "
diff --git a/genomeview.py b/genomeview.py
index 748239b..81a59c2 100644
--- a/genomeview.py
+++ b/genomeview.py
@@ -5,7 +5,8 @@ from genomeview.svg import Renderer, SVG
 
 
 class Document:
-    header = """<svg version="1.1" baseProfile="full" width="{width}" height="{height}" xmlns="http://www.w3.org/2000/svg">"""
+    #GG header = """<svg version="1.1" baseProfile="full" width="{width}" height="{height}" xmlns="http://www.w3.org/2000/svg">"""
+    header = """<svg version="1.1" baseProfile="full" width="{width}" height="{height}" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">"""
     footer = """</svg>"""
         
     def __init__(self, width):
diff --git a/svg.py b/svg.py
index fd69227..aa2d5a4 100644
--- a/svg.py
+++ b/svg.py
@@ -19,7 +19,8 @@ class SVG(GraphicsBackend):
     def text(self, x, y, text, size=10, anchor="middle", family="Helvetica", **kwdargs):
         defaults = {}
         assert anchor in ["start", "middle", "end"]
-        yield """<text x="{x:.2f}" y="{y:.2f}" font-size="{size}" font-family="{family}" text-anchor="{anchor}" {more}>{text}</text>""".format(
+        #GG yield """<text x="{x:.2f}" y="{y:.2f}" font-size="{size}" font-family="{family}" text-anchor="{anchor}" {more}>{text}</text>""".format(
+        yield """<a xlink:href="https://www.ncbi.nlm.nih.gov/protein/YP_034512.1" target="_blank"><text x="{x:.2f}" y="{y:.2f}" font-size="{size}" font-family="{family}" text-anchor="{anchor}" {more}>{text}</text></a>""".format(
             x=x, y=y, size=size, family=family, anchor=anchor, more=_addOptions(kwdargs, defaults), text=text)

     def text_with_background(self, x, y, text, size=10, anchor="middle", text_color="black", bg="white", bg_opacity=0.8, **kwdargs):
@@ -122,20 +123,28 @@ class SVG(GraphicsBackend):
         if direction == "right":
             path = """<path d="M {x0} {y0} L {x1} {y1} L {x2} {y2} L {x3} {y3} """ \
                    """L {x4} {y4} z" stroke="{stroke}" fill="{fill}" {more}/>"""
+            #GG Correct the length of the block & arrow so tip of arrow does not exdend past boundary of feature.
+            #coords["x1"], coords["y1"] = left+width, top
+            #coords["x2"], coords["y2"] = left+width+arrow_width, top+height/2
+            #coords["x3"], coords["y3"] = left+width, top+height
             coords["x0"], coords["y0"] = left, top,
-            coords["x1"], coords["y1"] = left+width, top
-            coords["x2"], coords["y2"] = left+width+arrow_width, top+height/2
-            coords["x3"], coords["y3"] = left+width, top+height
+            coords["x1"], coords["y1"] = left+width-arrow_width, top
+            coords["x2"], coords["y2"] = left+width, top+height/2
+            coords["x3"], coords["y3"] = left+width-arrow_width, top+height
             coords["x4"], coords["y4"] = left, top+height
         else:
             path = """<path d="M {x0} {y0} L {x1} {y1} L {x2} {y2} L {x3} {y3} """ \
                    """L {x4} {y4} z" stroke="{stroke}" fill="{fill}" {more}/>"""

-            coords["x0"], coords["y0"] = left, top
+            #GG Correct the length of the block & arrow so tip of arrow does not exdend past boundary of feature.
+            #coords["x0"], coords["y0"] = left, top
+            #coords["x3"], coords["y3"] = left, top+height
+            #coords["x4"], coords["y4"] = left-arrow_width, top+height/2
+            coords["x0"], coords["y0"] = left+arrow_width, top
             coords["x1"], coords["y1"] = left+width, top
             coords["x2"], coords["y2"] = left+width, top+height
-            coords["x3"], coords["y3"] = left, top+height
-            coords["x4"], coords["y4"] = left-arrow_width, top+height/2
+            coords["x3"], coords["y3"] = left+arrow_width, top+height
+            coords["x4"], coords["y4"] = left, top+height/2

         path = path.format(**coords)
         yield path
diff --git a/axis.py b/axis.py
index fd69227..aa2d5a4 100644
--- a/axis.py
+++ b/axis.py
@@ -72,9 +72,9 @@
     for i in range(int(roundStart), end, res):
         res_digits = math.log10(res)
         if res_digits >= 6:
-            label = "{}mb".format(i / 1e6)
+            label = "{}mb".format(int(i / 1e6))
         elif res_digits >= 3:
-            label = "{:,}kb".format(i / 1e3)
+            label = "{:,}kb".format(int(i / 1e3))
         else:
             label = "{:,}".format(i)

diff --git a/bedtrack.py b/bedtrack.py
index 048b7a6..7d90013 100644
--- a/bedtrack.py
+++ b/bedtrack.py
@@ -41,6 +41,8 @@
     name = coding_start = coding_end = exons = color = None
     strand = "+"

+    #print('FIELDS:',len(bedfields))
+    #print('#2=',bedfields[1],'    #6=',bedfields[5])
     if len(bedfields) >= 4:
         name = bedfields[3]
     if len(bedfields) >= 6:
@@ -106,7 +108,8 @@
 def fetch_from_plainbed(path, chrom, start, end):
     found_chrom = False
     for line in open(path):
-        fields = line.strip().split()
+        #GG fields = line.strip().split()
+        fields = line.strip().split('\t')  #GG
         if fields[0] != chrom: continue
         found_chrom = True

@@ -135,8 +138,10 @@
         self.draw_locus_labels = True
         self.include_locus_fn = None

-        self.row_height = 12
-        self.thick_width = self.row_height
+        #GG self.row_height = 12
+        self.row_height = 24   #GG make room for text label underneath
+        #GG self.thick_width = self.row_height
+        self.thick_width = self.row_height - 14   #GG
         self.thin_width = 5
         self.thinnest_width = 1

@@ -171,10 +176,11 @@
     def draw_interval(self, renderer, interval):
         # print(interval)
         interval_pixel_width = self.scale.relpixels(interval.tx.end-interval.tx.start)
-        if interval_pixel_width < 12:
-            # could probably improve on this
-            yield from super().draw_interval(renderer, interval)
-            return
+#GG removed this logic concerning small intervals
+#        if interval_pixel_width < 12:
+#            # could probably improve on this
+#            yield from super().draw_interval(renderer, interval)
+#            return
                     
         # print(1)
         row = self.intervals_to_rows[interval.id]
@@ -214,7 +220,8 @@ class BEDTrack(IntervalTrack):

         # Draw the "exons", both thin (non-coding/UTR) and thick (coding)
         # print(interval, tx.exons)
-        for which in ["thin", "thick"]:
+        #GG for which in ["thin", "thick"]:
+        for which in ["thin"]:  #GG
             for cur_start, cur_end in tx.exons:
                 if which == "thick":
                     cur_y = top
@@ -227,11 +234,13 @@ class BEDTrack(IntervalTrack):
                     cur_start = max(tx.coding_start, cur_start)
                     cur_end = min(tx.coding_end, cur_end)
                 else:
-                    if (tx.coding_start and 
-                        (cur_start > tx.coding_start) and (cur_end < tx.coding_end)): continue
+                    #GG if (tx.coding_start and
+                    #GG    (cur_start >= tx.coding_start) and (cur_end <= tx.coding_end)): continue

-                    cur_y = top_thin
-                    cur_width = self.thin_width
+                    #GG cur_y = top_thin
+                    #GG cur_width = self.thin_width
+                    cur_y = top
+                    cur_width = self.thick_width

                 cur_start = self.scale.topixels(cur_start)
                 cur_end = self.scale.topixels(cur_end)
@@ -241,12 +250,40 @@ class BEDTrack(IntervalTrack):
                     cur_start -= self.min_exon_width / 2
                     width = self.min_exon_width
 
-                yield from renderer.rect(cur_start, cur_y, width, cur_width, fill=color, 
-                                         **{"stroke":"none", "id":temp_label})
+#                yield from renderer.rect(cur_start, cur_y, width, cur_width, fill=color,
+#                                         **{"stroke":"none", "id":temp_label})
+
+                #GG increased arrow angle for better visibility
+                arrow_width = min(self.row_height / 2, self.margin_x * 0.7, self.scale.relpixels(80))
+                direction = "right" if interval.strand=="+" else "left"
+
+                #GG added arrows
+                #yield from renderer.block_arrow(cur_start, cur_y, width, self.row_height,
+                yield from renderer.block_arrow(cur_start, cur_y, width, cur_width,
+                    arrow_width=arrow_width, direction=direction,
+                    fill=color, **{"stroke":"none", "id":temp_label})
 
 
         if interval.label is not None:
             end = self.scale.topixels(interval.end)
+            end+= 5 if interval.strand=="+" else 0    #GG
+
+            #GG yield from renderer.text(end+self.label_distance, top+self.row_height-2, interval.label, anchor="start")
+            start = self.scale.topixels(interval.start)
+
+            #GG prevent truncation of label on left side of image
+            if start < 0:
+                start = 0
+
+            #GG prevent label truncation on the right side of image
+            # calculate an approximation of the rendered length
+            arr=[4.3,4.3,5.45,8.5,8.5,19.5,10.15,3.0,5.15,5.15,6.0,8.9,4.3,5.15,4.3,4.3,8.5,7.45,8.5,8.5,8.5,8.5,8.5,8.5,8.5,8.5,4.3,4.3,8.9,8.9,8.9,8.5,15.35,10.15,10.15,11.0,11.0,10.15,9.3,11.8,11.0,4.3,7.45,10.15,8.5,12.65,11.0,11.8,10.15,11.8,11.0,10.15,9.3,11.0,10.15,14.3,10.15,10.15,9.3,4.3,4.3,4.3,7.20,8.5,5.15,8.5,8.5,7.45,8.5,8.5,4.0,8.5,8.5,3.45,3.45,7.45,3.45,12.65,8.5,8.5,8.5,8.5,5.15,7.45,4.3,8.5,7.45,11.0,7.45,7.45,7.45,5.15,4.0,5.15,8.9]
+
+            label_len=0
+            for i, ch in enumerate(interval.label):
+                label_len += arr[ord(ch)-32] * 0.6666667
+
+            if start + label_len >= 892:
+                start = 892 - label_len
 
-            yield from renderer.text(end+self.label_distance, top+self.row_height-2, interval.label, anchor="start")
-        
\ No newline at end of file
+            yield from renderer.text(start, top+self.row_height-5, interval.label, anchor="start")
